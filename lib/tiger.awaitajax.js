// Generated by IcedCoffeeScript 1.6.2c
(function() {
  var Tiger, awaitAjax, iced, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Tiger = this.Tiger || require('./tiger');

  awaitAjax = {
    awaitAjax: function(options, cb, queue) {
      var data, rv, status, statusText, xhr, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (queue == null) {
        queue = false;
      }
      rv = new iced.Rendezvous();
      options.success = rv.id('success').defer({
        assign_fn: (function() {
          return function() {
            data = arguments[0];
            statusText = arguments[1];
            return xhr = arguments[2];
          };
        })(),
        lineno: 7,
        context: __iced_deferrals
      });
      options.error = rv.id('error').defer({
        assign_fn: (function() {
          return function() {
            xhr = arguments[0];
            statusText = arguments[1];
            return data = arguments[2];
          };
        })(),
        lineno: 8,
        context: __iced_deferrals
      });
      if (queue) {
        this.Q.ajaxQueue(options);
      } else {
        new this(options);
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/tiger.awaitajax.coffee",
          funcname: "awaitAjax"
        });
        rv.wait(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return status = arguments[0];
            };
          })(),
          lineno: 13
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(status, xhr, statusText, data);
      });
    },
    awaitGet: function(options, cb, queue) {
      options.method = 'GET';
      return this.awaitAjax(options, cb, queue);
    },
    awaitPost: function(options, cb, queue) {
      options.method = 'GET';
      return this.awaitAjax(options, cb, queue);
    },
    awaitQueuedAjax: function(options, cb) {
      return this.awaitAjax(options, cb, true);
    },
    awaitQueuedGet: function(options, cb) {
      return this.awaitGet(options, cb, true);
    },
    awaitQueuedPost: function(options, cb) {
      return this.awaitPost(options, cb, true);
    }
  };

  Tiger.Ajax.extend(awaitAjax);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = awaitAjax;
  }

}).call(this);
